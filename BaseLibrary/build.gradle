apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        multiDexEnabled true

        /**
         * 路由设置
         */
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            //项目进行动态配置
            buildConfigField "boolean", "IS_DEBUG", "false"
            buildConfigField "String", "buildTime", "\"" + releaseTime() + "\""
            //混淆
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug{
            buildConfigField "boolean", "IS_DEBUG", "true"
            buildConfigField "String", "buildTime", "\"" + releaseTime() + "\""
            //混淆
            minifyEnabled false
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources false

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //jdk1.8
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

}

static def releaseTime() {
    return new Date().format("MMddHHmmss", TimeZone.getTimeZone("Asia/Shanghai"))
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    api(rootProject.ext.dependencies["appcompat-v7"]) {
        exclude module: "support-v4"
        exclude module: "support-annotations"
    }
    api rootProject.ext.dependencies["design"]
    api rootProject.ext.dependencies["palette"]
    api rootProject.ext.dependencies["cardview-v7"]
    api rootProject.ext.dependencies["support-v4"]
    api rootProject.ext.dependencies["annotations"]
    api rootProject.ext.dependencies["recyclerView-x"]
    api rootProject.ext.dependencies["constraint-layout"]
    api rootProject.ext.dependencies["percent"]
    api rootProject.ext.dependencies["multidex"]

    api rootProject.ext.dependencies["rxrelay"]
    api rootProject.ext.dependencies["rxandroid2"]
    api rootProject.ext.dependencies["rxjava2"]
    api rootProject.ext.dependencies["router"]

    api rootProject.ext.dependencies["eventbus"]
    api rootProject.ext.dependencies["takephoto"]
    api rootProject.ext.dependencies["tablayout"]
    api rootProject.ext.dependencies["utilcode"]
    api rootProject.ext.dependencies["easypermissions"]

    api rootProject.ext.dependencies["YCStateLib"]
    api rootProject.ext.dependencies["YCDialogLib"]
    api rootProject.ext.dependencies["YCCountDownViewLib"]
    api rootProject.ext.dependencies["YCUtilsLib"]
    api rootProject.ext.dependencies["YCMultiInputViewLib"]
    api rootProject.ext.dependencies["YCProgressLib"]
    api rootProject.ext.dependencies["YCCardViewLib"]
    api rootProject.ext.dependencies["YCRecycleViewLib"]
    api rootProject.ext.dependencies["YCGalleryLib"]
    api rootProject.ext.dependencies["YCBaseAdapterLib"]
    api rootProject.ext.dependencies["YCBannerLib"]
    api rootProject.ext.dependencies["YCRefreshViewLib"]
    api rootProject.ext.dependencies["YCStatusBarLib"]
    api rootProject.ext.dependencies["YCThreadPoolLib"]
    api rootProject.ext.dependencies["notificationLib"]
    api rootProject.ext.dependencies["YCAndroidTool"]
    api rootProject.ext.dependencies["WebViewLib"]
    api rootProject.ext.dependencies["AppStart"]
    api rootProject.ext.dependencies["BaseRecyclerViewAdapterHelper"]
    api rootProject.ext.dependencies["immersionbar"]
    api rootProject.ext.dependencies["SmartRefreshLayout"]
    api rootProject.ext.dependencies["SmartRefreshHeader"]
    api rootProject.ext.dependencies["kprogresshud"]
    api rootProject.ext.dependencies["rxlifecycle"]
    api rootProject.ext.dependencies["rxlifecycle-android"]
    api rootProject.ext.dependencies["rxlifecycle-components"]
    api rootProject.ext.dependencies["agentweb"]
    api rootProject.ext.dependencies["filechooser"]
    api rootProject.ext.dependencies["dagger"]
    annotationProcessor rootProject.ext.dependencies["router-compiler"]
    annotationProcessor rootProject.ext.dependencies["dagger-compiler"]

    /*网络请求*/
    api rootProject.ext.dependencies["gson"]
    api rootProject.ext.dependencies["retrofit"]
    api rootProject.ext.dependencies["retrofit_adapter"]
    api rootProject.ext.dependencies["retrofit_gson"]
    api rootProject.ext.dependencies["rxjava"]
    api rootProject.ext.dependencies["rx_android"]
    api rootProject.ext.dependencies["logger"]
    api rootProject.ext.dependencies["utilcode"]
    api rootProject.ext.dependencies["rxlifecycle"]
    api rootProject.ext.dependencies["rxlifecycle-android"]
    api rootProject.ext.dependencies["rxlifecycle-components"]
    api rootProject.ext.dependencies["crashreport"]
    api rootProject.ext.dependencies["nativecrashreport"]
    api rootProject.ext.dependencies["webview"]

    api rootProject.ext.dependencies["lifecycle-extensions"]
    api rootProject.ext.dependencies["lifecycle-viewmodel"]
    api rootProject.ext.dependencies["lifecycle-livedata"]
    api rootProject.ext.dependencies["lifecycle-runtime"]
    annotationProcessor rootProject.ext.dependencies["lifecycle-compiler"]
    api rootProject.ext.dependencies["lifecycle-common-java8"]
    api rootProject.ext.dependencies["loadState"]


}